package com.sec.exploits.CommonsCollections.CommonsCollections5.NEW;

/**
 * @program: Gadgets
 * @description:
 * @author: 0range
 * @create: 2021-08-17 16:31
 **/

/**
 * <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
 *  <- <org.apache.commons.collections.functors.InvokerTransformer: java.lang.Object transform(java.lang.Object)> alias <- <org.apache.commons.collections.Transformer: java.lang.Object transform(java.lang.Object)>
 *  <- <org.apache.commons.collections.functors.TransformedPredicate: boolean evaluate(java.lang.Object)> alias <- <org.apache.commons.collections.Predicate: boolean evaluate(java.lang.Object)>
 *  <- <org.apache.commons.collections.iterators.FilterIterator: boolean setNextObject()>
 *  <- <org.apache.commons.collections.iterators.FilterIterator: boolean hasNext()> alias <- <java.util.Iterator: boolean hasNext()>
 *  <- <sun.misc.SoftCache$EntrySet: int size()> alias <- <java.util.Collection: int size()>
 *  <- <java.util.AbstractSet: boolean equals(java.lang.Object)>
 *  <- <java.util.RegularEnumSet: boolean equals(java.lang.Object)> alias <- <java.lang.Object: boolean equals(java.lang.Object)>
 *  <- <javax.script.SimpleBindings: void checkKey(java.lang.Object)>
 *  <- <javax.script.SimpleBindings: java.lang.Object get(java.lang.Object)> alias <- <java.util.Map: java.lang.Object get(java.lang.Object)>
 *  <- <org.apache.commons.collections.keyvalue.TiedMapEntry: java.lang.Object getValue()>
 *  <- <org.apache.commons.collections.keyvalue.TiedMapEntry: java.lang.String toString()> alias <- <java.lang.Object: java.lang.String toString()>
 *  <- <javax.management.BadAttributeValueExpException: void readObject(java.io.ObjectInputStream)> <- <javax.management.BadAttributeValueExpException: void readObject(java.io.ObjectInputStream)>
 */


public class TWO {
    public static void main(String[] args) {

    }
}
